import groovy.json.JsonSlurperClassic

@NonCPS
def jsonParse(def json) {
    /*
    need to approve
    method groovy.json.JsonSlurperClassic parseText java.lang.String
    new groovy.json.JsonSlurperClassic
    */
    new groovy.json.JsonSlurperClassic().parseText(json)
}

def js = readFile encoding: 'utf-8', file: 'build_script/config.json'
def jsObj = jsonParse(js)
def golden_image = jsObj["docker"]["centos"]["repo"] + ":" + jsObj["docker"]["centos"]["tag"]
def generic_image = jsObj["docker"]["generic"]["repo"] + ":" + jsObj["docker"]["generic"]["tag"]

pipeline {
	agent {
		label 'ub16.04'
	}

    stages {
        stage('prepare') {
            steps {
                git 'https://github.com/zhubinqiang/jenkins'
            }
        }

        stage('Build') {
            steps {
                parallel golden: {
                    withDockerContainer(args: '-u root', image: golden_image) {
                        sh 'cat /etc/redhat-release'
                        sh 'cd build_script && ./build2.py'
                    }
                }, generic: {
                    withDockerContainer(args: '-u root', image: generic_image) {
                        sh 'cat /etc/redhat-release'
                        sh 'cd build_script && ./build2.py'
                    }
                }
            }
        }

        stage('post') {
            steps {
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'html', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
            }
        }
    }

}



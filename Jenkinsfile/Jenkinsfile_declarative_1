import groovy.json.JsonSlurperClassic

@NonCPS
def jsonParse(def json) {
    /*
    need to approve
    method groovy.json.JsonSlurperClassic parseText java.lang.String
    new groovy.json.JsonSlurperClassic
    staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods putAt java.lang.Object java.lang.String java.lang.Object
    */
    new groovy.json.JsonSlurperClassic().parseText(json)
}

pipeline {
	agent {
		label 'ub16.04'
	}

    stages {
        stage('prepare') {
            steps {
                script {
                    def js = readFile encoding: 'utf-8', file: 'build_script/config.json'
                    def jsObj = jsonParse(js)
                    def golden_image = jsObj["docker"]["centos"]["repo"] + ":" + jsObj["docker"]["centos"]["tag"]
                    def generic_image = jsObj["docker"]["generic"]["repo"] + ":" + jsObj["docker"]["generic"]["tag"]

                    env['golden_image'] = golden_image
                    env['generic_image'] = generic_image
                }
            }
        }

        stage('Build') {
            parallel {
                stage('generic') {
                    steps {
                        withDockerContainer(args: '-u root', image: env.generic_image) {
                            sh 'cat /etc/redhat-release'
                            sh 'cd build_script && ./build2.py'
                        }
                    }
                }

                stage('golden') {
                    steps {
                        withDockerContainer(args: '-u root', image: env.golden_image) {
                            sh 'cat /etc/redhat-release'
                            sh 'cd build_script && ./build2.py'
                        }
                    }
                }

            }
        }

        stage('post') {
            steps {
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'html', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
            }
        }
    }

}



import groovy.json.JsonSlurperClassic

@NonCPS
def jsonParse(def json) {
    /*
    need to approve
    method groovy.json.JsonSlurperClassic parseText java.lang.String
    new groovy.json.JsonSlurperClassic
    */
    new groovy.json.JsonSlurperClassic().parseText(json)
}

mynode = 'ub16.04'

node(mynode) {
    stage('prepare') {
        git 'https://github.com/zhubinqiang/jenkins'
    }

    def js = readFile encoding: 'utf-8', file: 'build_script/config.json'
    def jsObj = jsonParse(js)
    def golden_image = jsObj["docker"]["centos"]["repo"] + ":" + jsObj["docker"]["centos"]["tag"]
    def generic_image = jsObj["docker"]["generic"]["repo"] + ":" + jsObj["docker"]["generic"]["tag"]

    stage('prepare') {
        sh 'cat /etc/issue'
    }

    stage('Build') {
        parallel golden: {
            withDockerContainer(args: '-u root', image: golden_image) {
                sh 'cat /etc/redhat-release'
                sh 'cd build_script && ./build2.py'
            }
        }, generic: {
            withDockerContainer(args: '-u root', image: generic_image) {
                sh 'cat /etc/redhat-release'
                sh 'cd build_script && ./build2.py'
            }
        }
        sh 'whoami'
    }

    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'html', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])

}

